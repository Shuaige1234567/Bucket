{"version":3,"file":"src_Container_assets_src_pages_ProveCanister_jsx.index.js","mappings":";;;;;;;;;;;;;;AAAA,mBAAmB,wBAAwB;AAC3C,YAAY,cAAc;AAC1B;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,aAAa;AAC5B,eAAe,oBAAoB;AACnC,eAAe,aAAa;AAC5B,eAAe,qBAAqB;AACpC,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,wCAAwC;AACxC,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA,cAAc;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA,eAAe;AACf;AACA;AACA;AACA,YAAY;AACZ,WAAW;AACX;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAA4C,gBAAgB,QAAQ;AACjF;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,mBAAmB,oBAAoB;AACvC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0BAA0B,aAAa;AACvC;AACA,0BAA0B,QAAQ;AAClC;AACA,mBAAmB,QAAQ;AAC3B,UAAU;AACV,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACyC;AACzC,4BAA4B,4CAAS;AACrC;AACA,eAAe,gDAAmB;AAClC;AACA;AACA,iEAAe,aAAa,EAAC","sources":["webpack://Container_assets/./src/Container_assets/src/pages/ProveCanister.jsx"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import { useDropzone } from \"react-dropzone\";\n// import sha256 from \"crypto-js/sha256\";\n// import hex from \"crypto-js/enc-hex\";\n// // import { Actor, HttpAgent } from \"@dfinity/agent\";\n// // import { AuthClient } from \"@dfinity/auth-client\";\n// // import { isDelegationValid } from \"@dfinity/authentication\";\n// // import { idlFactory } from \"./declarations/backend/backend.did.js\";\n// // import { DelegationIdentity } from \"@dfinity/identity\";\n// import { Bucket } from \"../../../declarations/Bucket/index.js\";\n//\n// const getReverseFileExtension = (type) => {\n//   switch (Object.keys(type)[0]) {\n//     case \"jpeg\":\n//       return \"image/jpeg\";\n//     case \"gif\":\n//       return \"image/gif\";\n//     case \"jpg\":\n//       return \"image/jpg\";\n//     case \"png\":\n//       return \"image/png\";\n//     case \"svg\":\n//       return \"image/svg\";\n//     case \"avi\":\n//       return \"video/avi\";\n//     case \"mp4\":\n//       return \"video/mp4\";\n//     case \"aac\":\n//       return \"video/aac\";\n//     case \"wav\":\n//       return \"audio/wav\";\n//     case \"mp3\":\n//       return \"audio/mp3\";\n//     default:\n//       return \"\";\n//   }\n// };\n//\n// const getFileExtension = (type) => {\n//   switch (type) {\n//     case \"image/jpeg\":\n//       return { jpeg: null };\n//     case \"image/gif\":\n//       return { gif: null };\n//     case \"image/jpg\":\n//       return { jpg: null };\n//     case \"image/png\":\n//       return { png: null };\n//     case \"image/svg\":\n//       return { svg: null };\n//     case \"video/avi\":\n//       return { avi: null };\n//     case \"video/aac\":\n//       return { aac: null };\n//     case \"video/mp4\":\n//       return { mp4: null };\n//     case \"audio/wav\":\n//       return { wav: null };\n//     case \"audio/mp3\":\n//       return { mp3: null };\n//     default:\n//       return null;\n//   }\n// };\n// function ProveCanister() {\n//   const [key, setKey] = useState(\"\");\n//   const [imgUrl, setImgUrl] = useState(\"\");\n//   const [fileType, setfileType] = useState(\"\");\n//\n//   // const handleSetKey = () => {\n//   //   let kkk = document.getElementById(\"setkey\").value;\n//   //   setKey(kkk);\n//   // };\n//   const onDrop = useCallback((acceptedFiles) => {\n//     // Do something with the files\n//     console.log(acceptedFiles);\n//\n//     const file = acceptedFiles[0];\n//     var fileSize = file.size; // 文件大小\n//     var chunkSize = 2 * 1024 * 1024; // 切片的大小\n//     var chunks = Math.ceil(fileSize / chunkSize); // 获取切片的个数\n//     var blobSlice =\n//       File.prototype.slice ||\n//       File.prototype.mozSlice ||\n//       File.prototype.webkitSlice;\n//     var currentChunk = 0;\n//     var tKey = \"\";\n//     const chunkPromises = [];\n//     const reader = new FileReader();\n//     var file_extension = getFileExtension(file.type);\n//     reader.onload = function (e) {\n//       let result = e.target.result;\n//       let tData = new Uint8Array(result);\n//       let data = [];\n//       for (let i = 0; i < tData.length; i++) {\n//         data.push(tData[i]);\n//       }\n//       let tmp = sha256(data).words;\n//       let buffer = Buffer.from(tmp.toString(hex), \"hex\");\n//       let ttmp = new Uint8Array(buffer);\n//       let digest = [];\n//       for (let i = 0; i < ttmp.length; i++) {\n//         digest.push(ttmp[i]);\n//       }\n//       if (currentChunk === 0) {\n//         Bucket.put({\n//           init: {\n//             chunk: { digest: digest, data: data },\n//             chunk_number: chunks,\n//             file_extension: file_extension,\n//           },\n//         }).then((re) => {\n//           tKey = re.ok.key;\n//           if (chunks === 1) {\n//             setKey(re.ok.key);\n//             console.log(re.ok.file_extension, tKey);\n//             console.log(Object.keys(re.ok.file_extension)[0]);\n//             setfileType({ fileType: Object.keys(re.ok.file_extension)[0] });\n//             console.log(`上传成功`);\n//           } else {\n//             currentChunk++;\n//             loadNext();\n//           }\n//         });\n//       } else if (currentChunk < chunks) {\n//         console.log(currentChunk, chunks);\n//         chunkPromises.push(\n//           Bucket.put({\n//             append: {\n//               chunk: { digest: digest, data: data },\n//               order: currentChunk,\n//               key: tKey,\n//             },\n//           })\n//         );\n//         if (currentChunk === chunks - 1) {\n//           console.log(chunkPromises);\n//           Promise.all(chunkPromises).then((re) => {\n//             console.log(re);\n//             setKey(re[chunks - 2].ok.key);\n//           });\n//         } else {\n//           currentChunk++;\n//           loadNext();\n//         }\n//       }\n//     };\n//     const loadNext = () => {\n//       var start = currentChunk * chunkSize;\n//       var end = start + chunkSize > fileSize ? fileSize : start + chunkSize;\n//       reader.readAsArrayBuffer(blobSlice.call(file, start, end));\n//     };\n//     loadNext();\n//   }, []);\n//\n//   const loadImg = async () => {\n//     let re = await Bucket.getAssetExt(key);\n//     console.log(re);\n//     let chunks = Number(re.ok.need_query_times);\n//     console.log(chunks);\n//     let file = [];\n//     for (let i = 0; i < chunks; i++) {\n//       let reFile = await Bucket.get({\n//         key: key,\n//         flag: i,\n//       });\n//       console.log(i);\n//       console.log(reFile);\n//       let tmp = reFile.ok[0];\n//       for (let i = 1; i < reFile.ok.length; i++) tmp = tmp.concat(reFile.ok[i]);\n//       file = file.concat(tmp);\n//     }\n//\n//     console.log(file);\n//     let ff = new Uint8Array(file).buffer;\n//     console.log(ff);\n//     let file_type = getReverseFileExtension(re.ok.file_extension);\n//     const blob = new Blob([ff], {\n//       type: file_type,\n//     });\n//\n//     console.log(blob);\n//     // console.log(sha256(blob).words);\n//     const url = URL.createObjectURL(blob);\n//     console.log(url);\n//     setImgUrl(url);\n//   };\n//   const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n//\n//   return (\n//     <div>\n//       <div {...getRootProps()}>\n//         <input {...getInputProps()} />\n//         {isDragActive ? (\n//           <p>Drop the files here ...</p>\n//         ) : (\n//           <p>Drag 'n' drop some files here, or click to select files</p>\n//         )}\n//       </div>\n//       {/* <input id=\"setkey\" />\n//       <button onClick={handleSetKey}>set key</button> */}\n//\n//       <button onClick={loadImg}>load</button>\n//\n//       <img src={imgUrl} />\n//       {/* <video width=\"320\" height=\"240\" controls>\n//         <source src={imgUrl} type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video> */}\n//     </div>\n//   );\n// }\n//\n// export default ProveCanister;\nimport React, { Component } from \"react\";\nclass ProveCanister extends Component {\n    render() {\n        return React.createElement(\"div\", null);\n    }\n}\nexport default ProveCanister;\n"],"names":[],"sourceRoot":""}